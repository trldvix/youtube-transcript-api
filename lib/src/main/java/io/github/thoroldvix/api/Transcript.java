package io.github.thoroldvix.api;


import java.util.*;

/**
 * Represents a single transcript for a YouTube video, including its metadata.
 * <p>
 * This interface provides methods to access the transcript content and to perform translations into different languages.
 * Individual transcripts can be obtained through the {@link TranscriptList} class.
 * </p>
 */
public class Transcript {

    private final YoutubeApi youtubeApi;
    private final String videoId;
    private final String apiUrl;
    private final String language;
    private final String languageCode;
    private final boolean isGenerated;
    private final Map<String, String> translationLanguages;
    private final boolean isTranslatable;

    Transcript(YoutubeApi youtubeApi,
                         String videoId,
                         String apiUrl,
                         String language,
                         String languageCode,
                         boolean isGenerated,
                         Map<String, String> translationLanguages) {
        this.youtubeApi = youtubeApi;
        this.videoId = videoId;
        this.apiUrl = apiUrl;
        this.language = language;
        this.languageCode = languageCode;
        this.isGenerated = isGenerated;
        this.translationLanguages = translationLanguages;
        this.isTranslatable = !translationLanguages.isEmpty();
    }

    /**
     * Retrieves the content of the transcript.
     *
     * @return The content of the transcript as a {@link TranscriptContent} object.
     * @throws TranscriptRetrievalException If the transcript content cannot be retrieved.
     */
    public TranscriptContent fetch() throws TranscriptRetrievalException {
        String transcriptXml = youtubeApi.fetchTranscriptContentXml(videoId, apiUrl);
        return TranscriptContentExtractor.extract(videoId, transcriptXml);
    }

    /**
     * Translates the transcript into the specified language.
     *
     * @param languageCode The language code to which the transcript should be translated.
     * @return A {@link Transcript} representing the translated transcript.
     * @throws TranscriptRetrievalException If the transcript cannot be translated.
     */
    public Transcript translate(String languageCode) throws TranscriptRetrievalException {
        checkIfPossibleToTranslate(languageCode);
        return new Transcript(
                youtubeApi,
                videoId,
                createTranslationApiUrl(languageCode),
                translationLanguages.get(languageCode),
                languageCode,
                isGenerated,
                translationLanguages
        );
    }

    private void checkIfPossibleToTranslate(String languageCode) throws TranscriptRetrievalException {
        if (!isTranslatable) {
            throw new TranscriptRetrievalException(videoId, "This transcript is not translatable");
        }
        if (!translationLanguages.containsKey(languageCode)) {
            throw new TranscriptRetrievalException(videoId, String.format("Translation language '%s' is not available", languageCode));
        }
    }

    private String createTranslationApiUrl(String languageCode) {
        return String.format("%s&tlang=%s", apiUrl, languageCode);
    }

    /**
     * Gets the video id of the transcript.
     *
     * @return The video id as a {@link String}.
     */
    public String getVideoId() {
        return videoId;
    }

    /**
     * Gets the language of the transcript.
     *
     * @return The language as a {@link String}.
     */
    public String getLanguage() {
        return language;
    }

    /**
     * Returns API URL which needs to be called to fetch transcript content.
     *
     * @return {@link String} API URL to fetch transcript content
     */
    public String getApiUrl() {
        return apiUrl;
    }

    /**
     * Gets the language code of the transcript.
     *
     * @return The language code as a {@link String}.
     */
    public String getLanguageCode() {
        return languageCode;
    }

    /**
     * Determines if the transcript was automatically generated by YouTube.
     *
     * @return {@code true} if the transcript was automatically generated; {@code false} otherwise.
     */
    public boolean isGenerated() {
        return isGenerated;
    }

    /**
     * Lists all available translation languages for the transcript.
     *
     * @return A set of language codes representing available translation languages.
     */
    public Set<String> getTranslationLanguages() {
        return Collections.unmodifiableSet(translationLanguages.keySet());
    }

    /**
     * Indicates whether the transcript can be translated.
     *
     * @return {@code true} if the transcript is translatable; {@code false} otherwise.
     */
    public boolean isTranslatable() {
        return isTranslatable;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Transcript that = (Transcript) o;
        return isGenerated == that.isGenerated && isTranslatable == that.isTranslatable &&
               Objects.equals(youtubeApi, that.youtubeApi) && Objects.equals(videoId, that.videoId) &&
               Objects.equals(apiUrl, that.apiUrl) && Objects.equals(language, that.language) &&
               Objects.equals(languageCode, that.languageCode) &&
               Objects.equals(translationLanguages, that.translationLanguages);
    }

    @Override
    public int hashCode() {
        return Objects.hash(youtubeApi, videoId, apiUrl, language, languageCode, isGenerated, translationLanguages, isTranslatable);
    }

    @Override
    public String toString() {
        String template = "Transcript for video with id: %s.\n" +
                          "Language: %s\n" +
                          "Language code: %s\n" +
                          "API URL for retrieving content: %s\n" +
                          "Available translation languages: %s";

        return String.format(template,
                videoId,
                language,
                languageCode,
                apiUrl,
                new TreeSet<>(translationLanguages.keySet()));
    }
}
